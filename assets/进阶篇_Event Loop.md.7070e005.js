import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.e9e877ca.js";const e="/vitepress-kether-tahm/Node-eventloop.png",o="/vitepress-kether-tahm/Node-eventloop-order.png",C=JSON.parse('{"title":"Event Loop","description":"","frontmatter":{},"headers":[],"relativePath":"进阶篇/Event Loop.md","filePath":"进阶篇/Event Loop.md","lastUpdated":1691575811000}'),p={name:"进阶篇/Event Loop.md"},c=l('<h1 id="event-loop" tabindex="-1">Event Loop <a class="header-anchor" href="#event-loop" aria-label="Permalink to &quot;Event Loop&quot;">​</a></h1><p>ES 的运行环境都采用了<strong>单线程</strong>模型，这意味着任一时刻，ES 只能执行一个操作。单线程的好处是：不需要考虑并发和同步问题、避免竞态条件、节省内存。单线程的坏处在于：无法利用多核 CPU、不适合 CPU 密集型任务。</p><p>浏览器提供了 Web Workers 技术，使用 <code>Worker</code> 类创建独立线程。Node.js 提供了对应的 Worker Threads 技术，后者引用 <code>worker_threads</code> 包创建独立线程。这两种方案创建的独立线程，可以与主线程通信，从而利用多核 CPU，处理 CPU 密集型任务。</p><h2 id="浏览器的事件循环" tabindex="-1">浏览器的事件循环 <a class="header-anchor" href="#浏览器的事件循环" aria-label="Permalink to &quot;浏览器的事件循环&quot;">​</a></h2><p>在现代浏览器中，一个标签页通常是一个独立的进程，每个进程都可以包含多个线程。浏览器有一个主线程，负责处理子线程的协调和调度，这些子线程包括：</p><ul><li>渲染线程：负责页面的渲染和绘制，包括布局计算、绘制图形等任务</li><li>ES 引擎线程：负责解析和执行 ES 代码，ES 引擎线程运行会阻塞渲染线程的执行</li><li>事件线程：负责处理用户输入和其它事件的触发和处理</li><li>定时器线程：<code>setInterval</code> 与 <code>setTimeout</code> 所在的线程，用于计时并触发定时任务</li><li>存储线程：负责处理与存储相关的任务，如读取和写入本地存储</li><li>网络线程：负责处理网络请求和响应的发送和接收</li><li>工作线程（Web Workers）：用于执行耗时的操作，以避免阻塞主线程</li></ul><h3 id="调用栈" tabindex="-1">调用栈 <a class="header-anchor" href="#调用栈" aria-label="Permalink to &quot;调用栈&quot;">​</a></h3><p>调用栈是一个用于追踪函数调用的有限栈内存区域。当函数被调用时，会被推入调用栈，当函数执行完成后，会从调用栈中弹出。</p><p>函数执行过程中，如果触发了异步任务，会将被触发的异步任务交给<strong>特定的线程处理</strong>，函数继续执行完成后正常出栈。当异步操作完成需要执行回调函数时，<strong>特定的处理线程</strong>会将回调函数放入对应的任务队列。</p><h3 id="任务队列" tabindex="-1">任务队列 <a class="header-anchor" href="#任务队列" aria-label="Permalink to &quot;任务队列&quot;">​</a></h3><p>任务队列是一个遵循先进先出原则的队列，在浏览器中，任务队列由浏览器内核或 ES 引擎创建和管理，浏览器中包含两个主要的任务队列：<strong>宏任务队列（Macro Task Queue）<strong>和</strong>微任务队列（Micro Task Queue）</strong>，它们分别用于存放微任务和宏任务的回调函数，微任务队列执行的优先级高于宏任务队列。</p><h4 id="宏任务" tabindex="-1">宏任务 <a class="header-anchor" href="#宏任务" aria-label="Permalink to &quot;宏任务&quot;">​</a></h4><ul><li>定时器：<code>setTimeout()</code>、<code>setInterval()</code></li><li>UI 事件交互</li><li>网络请求</li><li><code>requestAnimationFrame()</code>：用于在浏览器的下一帧渲染之前执行回调函数</li><li><code>MessageChannel()</code>：用于跨线程异步通信</li></ul><h4 id="微任务" tabindex="-1">微任务 <a class="header-anchor" href="#微任务" aria-label="Permalink to &quot;微任务&quot;">​</a></h4><ul><li><code>Promise</code></li><li><code>await</code>：<code>await</code> 关键字后的 <code>Promise</code> 对象会被包装称微任务</li><li><code>MutationObserver()</code>：监听 DOM 变动的回调会被放入微任务队列</li></ul><h3 id="事件循环过程" tabindex="-1">事件循环过程 <a class="header-anchor" href="#事件循环过程" aria-label="Permalink to &quot;事件循环过程&quot;">​</a></h3><ol><li>主线程（指 ES 引擎线程）执行同步任务，入栈、出栈直到调用栈为空。执行过程中的异步任务交由特定线程处理，异步操作执行完成后，回调函数被放入对应的微任务队列或宏任务队列中</li><li>依次取出微任务队列中的回调函数直到清空</li><li>取出宏任务队列中的一个回调函数执行</li><li>依次取出微任务队列中的回调函数执行直到清空</li><li>重复 <code>3</code>、<code>4</code> 步骤，直至所有任务队列清空</li></ol><p>事件循环持续运行，不断检查微任务队列和宏任务队列。每执行一次宏任务回调函数，就需要清空所有微任务队列。</p><h2 id="node-js-的事件循环" tabindex="-1">Node.js 的事件循环 <a class="header-anchor" href="#node-js-的事件循环" aria-label="Permalink to &quot;Node.js 的事件循环&quot;">​</a></h2><p>Node.js 事件循环由 <code>libuv</code> 库实现，Node.js 执行过程中的异步任务交由 <code>libuv</code> 处理，异步操作执行完成后，回调函数会被放入对应的任务队列中。</p><p>当 Node.js 启动时会初始化事件循环，事件循环包含以下六个阶段，这些阶段会依次执行：</p><ol><li><code>timers</code>：执行到期的 <code>setTimeout()</code> 和 <code>setInterval()</code> 的回调</li><li><code>pending callbacks</code>：执行上一个循环的 <code>poll</code> 阶段还没来得及处理的回调</li><li><code>idle, prepare</code>：仅在 Node.js 内部使用，可忽略</li><li><code>poll</code>：执行网络请求、文件读写等 I/O 的回调</li><li><code>check</code>：执行 <code>setImmediate()</code> 的回调</li><li><code>close callbacks</code>：执行 <code>close</code> 事件回调，如 <code>socket.on(&#39;close&#39;, cb)</code> 的回调</li></ol><p><img src="'+e+'" alt="Node-eventloop"></p><p>每个阶段都有一个对应的（宏）任务队列，每个阶段都需要清空对应的任务队列，执行完所有的回调函数，事件循环才会进入下一个阶段。Node.js 中还有另外还有两个优先级更高的队列：</p><ul><li><code>NextTick Queue</code>：存放 <code>procee.nextTick()</code> 回调，优先级最高，某个阶段产生的 <code>procee.nextTick()</code> 回调会插入前阶段的末尾执行，而不是下一个事件循环中</li><li><code>MicroTask Queue</code>：存放 <code>Promise</code> 的 <code>then()</code>、<code>catch()</code> 回调，行为类似 <code>procee.nextTick()</code>，优先级仅次于 <code>NextTick Queue</code></li></ul><p><img src="'+o+`" alt="Node-eventloop-order"></p><h3 id="关于-poll-阶段" tabindex="-1">关于 <code>poll</code> 阶段 <a class="header-anchor" href="#关于-poll-阶段" aria-label="Permalink to &quot;关于 \`poll\` 阶段&quot;">​</a></h3><p>在 <code>poll</code> 阶段，I/O 的回调函数可能持续触发，因此这个过程可能会阻塞后续阶段的回调执行。</p><p>为确保定时器的执行不会误差太多，事件循环会使用定时器队列中最小的 <code>timeout</code>，如果在执行 <code>timeout</code> 时间后，还有 I/O 回调函数未执行，事件循环会立即结束当前 <code>poll</code> 阶段，并将剩余的回调函数放入 <code>pending callbacks</code> 队列。</p><p>由于回调函数本身是同步执行的，如果某次回调函数执行时间过长，那么定时器可能会有相当大的误差。</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">https</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">https.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/stream-bytes/10240?chunk_size=16&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;CHUNK&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;end&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;END&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  }).</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;SETTIMEOUT&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">https</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">https.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://httpbin.org/stream-bytes/10240?chunk_size=16&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    response.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;CHUNK&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    response.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;end&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;END&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;SETTIMEOUT&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">)</span></span></code></pre></div><p>适当调整 <code>setTimeout()</code> 延迟参数，可以得到下面的结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">SETTIMEOUT</span></span>
<span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">CHUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">SETTIMEOUT</span></span>
<span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">CHUNK</span></span>
<span class="line"><span style="color:#24292e;">...</span></span></code></pre></div><p>但是如果 <code>data</code> 事件的回调函数内有较复杂的费时操作，还是会影响到定时器的准确性。</p>`,34),t=[c];function r(i,E,d,y,h,u){return n(),a("div",null,t)}const g=s(p,[["render",r]]);export{C as __pageData,g as default};
